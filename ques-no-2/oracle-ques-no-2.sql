a[CREATE TABLE CUSTOMER (
    CUSTOMERNO VARCHAR2(5) PRIMARY KEY,
    CNAME VARCHAR2(30),
    CITY VARCHAR2(30),
    CONSTRAINT check_customerno CHECK (CUSTOMERNO LIKE 'C%')
);

CREATE TABLE CUST_ORDER (
    ORDERNO VARCHAR2(5) PRIMARY KEY,
    ODATE DATE,
    CUSTOMERNO VARCHAR2(5),
    ORD_AMT NUMBER(8),
    CONSTRAINT check_orderno CHECK (ORDERNO LIKE 'O%'),
    CONSTRAINT fk_customer FOREIGN KEY (CUSTOMERNO) REFERENCES CUSTOMER(CUSTOMERNO)
);

CREATE TABLE ITEM (
    ITEMNO VARCHAR2(5) PRIMARY KEY,
    ITEM_NAME VARCHAR2(30),
    UNIT_PRICE NUMBER(5),
    CONSTRAINT check_itemno CHECK (ITEMNO LIKE 'I%')
);

CREATE TABLE ORDER_ITEM (
    ORDERNO VARCHAR2(5),
    ITEMNO VARCHAR2(5),
    QTY NUMBER(3),
    PRIMARY KEY (ORDERNO, ITEMNO),
    CONSTRAINT fk_order_item_order FOREIGN KEY (ORDERNO) REFERENCES CUST_ORDER(ORDERNO),
    CONSTRAINT fk_order_item_item FOREIGN KEY (ITEMNO) REFERENCES ITEM(ITEMNO)
);

CREATE TABLE SHIPMENT (
    ORDERNO VARCHAR2(5),
    ITEMNO VARCHAR2(5),
    SHIP_DATE DATE,
    PRIMARY KEY (ORDERNO, ITEMNO),
    CONSTRAINT fk_shipment_order FOREIGN KEY (ORDERNO) REFERENCES CUST_ORDER(ORDERNO),
    CONSTRAINT fk_shipment_item FOREIGN KEY (ITEMNO) REFERENCES ITEM(ITEMNO)
); ]

b[ Populating the Database:
Use INSERT INTO statements to add data to each table. ]

c[ SELECT C.CUSTOMERNO, C.CNAME, COUNT(O.ORDERNO) AS NUM_ORDERS
FROM CUSTOMER C
JOIN CUST_ORDER O ON C.CUSTOMERNO = O.CUSTOMERNO
GROUP BY C.CUSTOMERNO, C.CNAME
HAVING COUNT(O.ORDERNO) > 3; ]

d[SELECT *
FROM ITEM
WHERE UNIT_PRICE < (SELECT AVG(UNIT_PRICE) FROM ITEM); ]

e[SELECT ORDERNO, COUNT(ITEMNO) AS NUM_ITEMS
FROM ORDER_ITEM
GROUP BY ORDERNO; ]

f[SELECT ITEMNO, COUNT(DISTINCT ORDERNO) AS ORDER_COUNT
FROM ORDER_ITEM
GROUP BY ITEMNO
HAVING COUNT(DISTINCT ORDERNO) >= (SELECT COUNT(DISTINCT ORDERNO) * 0.25 FROM CUST_ORDER); ]

g[ UPDATE CUST_ORDER
SET ORD_AMT = /* Your calculation logic for ORD_AMT */
WHERE /* Your condition */;]

h[CREATE OR REPLACE VIEW CustomerOrderDetails AS
SELECT C.CUSTOMERNO, C.CNAME, COUNT(O.ORDERNO) AS NUM_ORDERS
FROM CUSTOMER C
JOIN CUST_ORDER O ON C.CUSTOMERNO = O.CUSTOMERNO
GROUP BY C.CUSTOMERNO, C.CNAME; ]

i[CREATE OR REPLACE TRIGGER max_order_items
BEFORE INSERT ON ORDER_ITEM
FOR EACH ROW
DECLARE
    cnt NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO cnt
    FROM ORDER_ITEM
    WHERE ORDERNO = :NEW.ORDERNO;

    IF cnt >= 6 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Maximum limit reached for this order');
    END IF;
END; ]

j[CREATE OR REPLACE PROCEDURE DISP(order_num IN VARCHAR2)
IS
    order_exists NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO order_exists
    FROM CUST_ORDER
    WHERE ORDERNO = order_num;
   
    IF order_exists > 0 THEN
        SELECT * FROM CUST_ORDER WHERE ORDERNO = order_num;
    ELSE
        DBMS_OUTPUT.PUT_LINE('No such order');
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred');
END; ]