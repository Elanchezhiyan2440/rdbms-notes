--BANKING APPLICATION:
--POSTGRES VERSION:

--Create tables:
CREATE TABLE CUSTOMER(CID SMALLINT, CNAME VARCHAR(50),PRIMARY KEY(CID));
CREATE TABLE BRANCH(BCODE SMALLINT, BNAME VARCHAR(50),PRIMARY KEY(BCODE));
CREATE TABLE ACCOUNT(ANO BIGINT, ATYPE CHAR CHECK(ATYPE IN ('S','C')), BALANCE FLOAT(10), CID SMALLINT, BCODE SMALLINT, PRIMARY KEY(ANO), FOREIGN KEY (CID) REFERENCES CUSTOMER (CID), FOREIGN KEY (BCODE) REFERENCES BRANCH (BCODE));

--Create Views:
CREATE VIEW BRANCH_DETAILS AS SELECT B.BCODE, B.BNAME, COUNT(A.ANO) FROM BRANCH B, ACCOUNT A WHERE B.BCODE = A.BCODE GROUP BY B.BCODE, B.BNAME;

--Create functions:
CREATE OR REPLACE FUNCTION update_balance()
RETURNS TRIGGER AS $$
BEGIN
IF NEW.Tttype = 'W' THEN
IF (SELECT Balance FROM Account WHERE Ano = NEW.Ano) < NEW.Tamount THEN
RAISE EXCEPTION 'Withdrawal amount exceeds available balance.';
ELSE
UPDATE Account SET Balance = Balance - NEW.Tamount WHERE Ano = NEW.Ano;
END IF;
ELSIF NEW.Tttype = 'D' THEN
UPDATE Account SET Balance = Balance + NEW.Tamount WHERE Ano = NEW.Ano;
END IF;
RETURN NEW;
END;
$$ LANGUAGE plpgsql;

--Create triggers:
CREATE TRIGGER TRANSTRIGG
AFTER INSERT ON TRANSACTION
FOR EACH ROW
EXECUTE PROCEDURE update_balance();