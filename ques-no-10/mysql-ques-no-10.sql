--MYSQL

-- Create CITY table
CREATE TABLE CITY (
    CCODE VARCHAR(5) PRIMARY KEY NOT NULL CHECK(CCODE LIKE 'CT%'),
    CNAME VARCHAR(30)
);

-- Create TRUCK table
CREATE TABLE TRUCK (
    TRUCKCODE VARCHAR(5) PRIMARY KEY NOT NULL CHECK(TRUCKCODE LIKE 'T%'),
    TTYPE VARCHAR(30) CHECK(TTYPE IN ('L','H'))
);

-- Create DRIVER table
CREATE TABLE DRIVER (
    DCODE VARCHAR(5) PRIMARY KEY NOT NULL CHECK(DCODE LIKE 'D%'),
    DNAME VARCHAR(30)
);

-- Create DRIVE_TRUCK table
CREATE TABLE DRIVE_TRUCK (
    TRUCKCODE VARCHAR(5),
    DCODE VARCHAR(5),
    DOT DATE,
    CCODE VARCHAR(5),
    PRIMARY KEY(TRUCKCODE, DCODE, DOT),
    FOREIGN KEY(TRUCKCODE) REFERENCES TRUCK(TRUCKCODE),
    FOREIGN KEY(DCODE) REFERENCES DRIVER(DCODE),
    FOREIGN KEY(CCODE) REFERENCES CITY(CCODE)
);

-- Create ITEM table
CREATE TABLE ITEM (
    ITEMNO VARCHAR(5) PRIMARY KEY NOT NULL CHECK(ITEMNO LIKE 'T%'),
    ITEM_NAME VARCHAR(30),
    UNIT_PRICE INTEGER
);

-- Create CUSTOMER table
CREATE TABLE CUSTOMER (
    CUSTOMERNO VARCHAR(5) PRIMARY KEY NOT NULL CHECK(CUSTOMERNO LIKE 'C%'),
    CNAME VARCHAR(30),
    CCODE VARCHAR(5),
    FOREIGN KEY(CCODE) REFERENCES CITY(CCODE)
);

-- Create CUST_ORDER table
CREATE TABLE CUST_ORDER (
    ORDERNO VARCHAR(5) PRIMARY KEY NOT NULL CHECK(ORDERNO LIKE 'O%'),
    ODATE DATE,
    CUSTOMERNO VARCHAR(5),
    ORD_AMT INTEGER DEFAULT 0,
    FOREIGN KEY(CUSTOMERNO) REFERENCES CUSTOMER(CUSTOMERNO)
);

-- Create ORDER_ITEM table
CREATE TABLE ORDER_ITEM (
    ORDERNO VARCHAR(5),
    ITEMNO VARCHAR(5),
    QTY INTEGER,
    FOREIGN KEY(ORDERNO) REFERENCES CUST_ORDER(ORDERNO),
    FOREIGN KEY(ITEMNO) REFERENCES ITEM(ITEMNO),
    PRIMARY KEY(ORDERNO, ITEMNO)
);

-- Create SHIPMENT table
CREATE TABLE SHIPMENT (
    ORDERNO VARCHAR(5),
    ITEMNO VARCHAR(5),
    SHIP_DATE DATE,
    FOREIGN KEY(ORDERNO) REFERENCES CUST_ORDER(ORDERNO),
    FOREIGN KEY(ITEMNO) REFERENCES ITEM(ITEMNO),
    PRIMARY KEY(ORDERNO, ITEMNO)
);

-- Populate CITY table
INSERT INTO CITY (CCODE, CNAME) VALUES
('CT001', 'CityA'),
('CT002', 'CityB'),
('CT003', 'CityC');

-- Populate TRUCK table
INSERT INTO TRUCK (TRUCKCODE, TTYPE) VALUES
('T001', 'L'),
('T002', 'H'),
('T003', 'L');

-- Populate DRIVER table
INSERT INTO DRIVER (DCODE, DNAME) VALUES
('D001', 'DriverA'),
('D002', 'DriverB'),
('D003', 'DriverC');

-- Populate DRIVE_TRUCK table
INSERT INTO DRIVE_TRUCK (TRUCKCODE, DCODE, DOT, CCODE) VALUES
('T001', 'D001', '2023-01-01', 'CT001'),
('T002', 'D002', '2023-02-01', 'CT002'),
('T003', 'D003', '2023-03-01', 'CT003');

-- Populate ITEM table
INSERT INTO ITEM (ITEMNO, ITEM_NAME, UNIT_PRICE) VALUES
('T001', 'ItemA', 50),
('T002', 'ItemB', 100),
('T003', 'ItemC', 75);

-- Populate CUSTOMER table
INSERT INTO CUSTOMER (CUSTOMERNO, CNAME, CCODE) VALUES
('C001', 'CustomerA', 'CT001'),
('C002', 'CustomerB', 'CT002'),
('C003', 'CustomerC', 'CT003');

-- Populate CUST_ORDER table
INSERT INTO CUST_ORDER (ORDERNO, ODATE, CUSTOMERNO, ORD_AMT) VALUES
('O001', '2023-01-10', 'C001', 200),
('O004', '2023-01-11', 'C001', 80),
('O005', '2023-01-12', 'C001', 100),
('O006', '2023-01-13', 'C001', 90),
('O002', '2023-02-15', 'C002', 150),
('O003', '2023-03-20', 'C003', 300);

-- Populate ORDER_ITEM table
INSERT INTO ORDER_ITEM (ORDERNO, ITEMNO, QTY) VALUES
('O001', 'T001', 2),
('O002', 'T002', 1),
('O003', 'T003', 3);

-- Populate SHIPMENT table
INSERT INTO SHIPMENT (ORDERNO, ITEMNO, SHIP_DATE) VALUES
('O001', 'T001', '2023-01-15'),
('O002', 'T002', '2023-02-20'),
('O003', 'T003', '2023-03-25');

-- Query A
SELECT C.CUSTOMERNO, C.CNAME, COUNT(O.ORDERNO) AS ORDER_COUNT
FROM CUSTOMER C
JOIN CUST_ORDER O ON C.CUSTOMERNO = O.CUSTOMERNO
GROUP BY C.CUSTOMERNO, C.CNAME
HAVING COUNT(O.ORDERNO) > 3;

-- Query B
SELECT * FROM ITEM WHERE UNIT_PRICE < (SELECT AVG(UNIT_PRICE) FROM ITEM);

-- Query C
UPDATE CUST_ORDER
SET ORD_AMT = 250
WHERE ORDERNO = 'O001';

-- Query D
CREATE VIEW DRIVER_TRIPS_VIEW AS
SELECT D.DCODE, D.DNAME, COUNT(DT.TRUCKCODE) AS TRIPS_TRAVELED
FROM DRIVER D
LEFT JOIN DRIVE_TRUCK DT ON D.DCODE = DT.DCODE
GROUP BY D.DCODE, D.DNAME;

-- Query E
DELIMITER //
CREATE TRIGGER limit_drive_truck_insert
BEFORE INSERT ON DRIVE_TRUCK
FOR EACH ROW
BEGIN
    IF (
        SELECT COUNT(*)
        FROM DRIVE_TRUCK
        WHERE CCODE = NEW.CCODE AND DOT = NEW.DOT
    ) >= 2 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Cannot insert more than two records for the same city on the same day';
    END IF;
END;
//
DELIMITER ;

-- Query F
DELIMITER //

CREATE PROCEDURE get_driver_trip_count(
    IN p_driver_code VARCHAR(5),
    OUT p_trip_count INT
)
BEGIN
    -- Initialize the trip count to 0
    SET p_trip_count := 0;

    -- Check if the driver code exists
    BEGIN
        DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
            -- Use RESIGNAL to re-raise the exception
            RESIGNAL;
        END;

        SELECT COUNT(*) INTO p_trip_count
        FROM DRIVE_TRUCK
        WHERE DCODE = p_driver_code;
    END;
END;

//

DELIMITER ;


-- Query G
SET @trip_count := 0;
CALL get_driver_trip_count('D001', @trip_count);
SELECT @trip_count AS 'Total trips for driver D001';
