--ORACLE

-- Create CITY table
CREATE TABLE CITY (
    CCODE VARCHAR2(5) CONSTRAINT PK_CITY PRIMARY KEY NOT NULL CHECK (REGEXP_LIKE(CCODE, '^CT')),
    CNAME VARCHAR2(30)
);

-- Create TRUCK table
CREATE TABLE TRUCK (
    TRUCKCODE VARCHAR2(5) CONSTRAINT PK_TRUCK PRIMARY KEY NOT NULL CHECK (REGEXP_LIKE(TRUCKCODE, '^T')),
    TTYPE VARCHAR2(30) CONSTRAINT CHK_TTYPE CHECK (TTYPE IN ('L', 'H'))
);

-- Create DRIVER table
CREATE TABLE DRIVER (
    DCODE VARCHAR2(5) CONSTRAINT PK_DRIVER PRIMARY KEY NOT NULL CHECK (REGEXP_LIKE(DCODE, '^D')),
    DNAME VARCHAR2(30)
);

-- Create DRIVE_TRUCK table
CREATE TABLE DRIVE_TRUCK (
    TRUCKCODE VARCHAR2(5),
    DCODE VARCHAR2(5),
    DOT DATE,
    CCODE VARCHAR2(5),
    PRIMARY KEY (TRUCKCODE, DCODE, DOT),
    FOREIGN KEY (TRUCKCODE) REFERENCES TRUCK(TRUCKCODE),
    FOREIGN KEY (DCODE) REFERENCES DRIVER(DCODE),
    FOREIGN KEY (CCODE) REFERENCES CITY(CCODE)
);

-- Create ITEM table
CREATE TABLE ITEM (
    ITEMNO VARCHAR2(5) CONSTRAINT PK_ITEM PRIMARY KEY NOT NULL CHECK (REGEXP_LIKE(ITEMNO, '^T')),
    ITEM_NAME VARCHAR2(30),
    UNIT_PRICE NUMBER
);

-- Create CUSTOMER table
CREATE TABLE CUSTOMER (
    CUSTOMERNO VARCHAR2(5) CONSTRAINT PK_CUSTOMER PRIMARY KEY NOT NULL CHECK (REGEXP_LIKE(CUSTOMERNO, '^C')),
    CNAME VARCHAR2(30),
    CCODE VARCHAR2(5),
    FOREIGN KEY (CCODE) REFERENCES CITY(CCODE)
);

-- Create CUST_ORDER table
CREATE TABLE CUST_ORDER (
    ORDERNO VARCHAR2(5) CONSTRAINT PK_CUST_ORDER PRIMARY KEY NOT NULL CHECK (REGEXP_LIKE(ORDERNO, '^O')),
    ODATE DATE,
    CUSTOMERNO VARCHAR2(5),
    ORD_AMT NUMBER DEFAULT 0,
    FOREIGN KEY (CUSTOMERNO) REFERENCES CUSTOMER(CUSTOMERNO)
);

-- Create ORDER_ITEM table
CREATE TABLE ORDER_ITEM (
    ORDERNO VARCHAR2(5),
    ITEMNO VARCHAR2(5),
    QTY NUMBER,
    PRIMARY KEY (ORDERNO, ITEMNO),
    FOREIGN KEY (ORDERNO) REFERENCES CUST_ORDER(ORDERNO),
    FOREIGN KEY (ITEMNO) REFERENCES ITEM(ITEMNO)
);

-- Create SHIPMENT table
CREATE TABLE SHIPMENT (
    ORDERNO VARCHAR2(5),
    ITEMNO VARCHAR2(5),
    SHIP_DATE DATE,
    PRIMARY KEY (ORDERNO, ITEMNO),
    FOREIGN KEY (ORDERNO) REFERENCES CUST_ORDER(ORDERNO),
    FOREIGN KEY (ITEMNO) REFERENCES ITEM(ITEMNO)
);

-- Populate CITY table
INSERT INTO CITY (CCODE, CNAME) VALUES
('CT001', 'CityA'),
('CT002', 'CityB'),
('CT003', 'CityC');

-- Populate TRUCK table
INSERT INTO TRUCK (TRUCKCODE, TTYPE) VALUES
('T001', 'L'),
('T002', 'H'),
('T003', 'L');

-- Populate DRIVER table
INSERT INTO DRIVER (DCODE, DNAME) VALUES
('D001', 'DriverA'),
('D002', 'DriverB'),
('D003', 'DriverC');

-- Populate DRIVE_TRUCK table
INSERT INTO DRIVE_TRUCK (TRUCKCODE, DCODE, DOT, CCODE) VALUES
('T001', 'D001', TO_DATE('2023-01-01', 'YYYY-MM-DD'), 'CT001'),
('T002', 'D002', TO_DATE('2023-02-01', 'YYYY-MM-DD'), 'CT002'),
('T003', 'D003', TO_DATE('2023-03-01', 'YYYY-MM-DD'), 'CT003');

-- Populate ITEM table
INSERT INTO ITEM (ITEMNO, ITEM_NAME, UNIT_PRICE) VALUES
('T001', 'ItemA', 50),
('T002', 'ItemB', 100),
('T003', 'ItemC', 75);

-- Populate CUSTOMER table
INSERT INTO CUSTOMER (CUSTOMERNO, CNAME, CCODE) VALUES
('C001', 'CustomerA', 'CT001'),
('C002', 'CustomerB', 'CT002'),
('C003', 'CustomerC', 'CT003');

-- Populate CUST_ORDER table
INSERT INTO CUST_ORDER (ORDERNO, ODATE, CUSTOMERNO, ORD_AMT) VALUES
('O001', TO_DATE('2023-01-10', 'YYYY-MM-DD'), 'C001', 200),
('O004', TO_DATE('2023-01-11', 'YYYY-MM-DD'), 'C001', 80),
('O005', TO_DATE('2023-01-12', 'YYYY-MM-DD'), 'C001', 100),
('O006', TO_DATE('2023-01-13', 'YYYY-MM-DD'), 'C001', 90),
('O002', TO_DATE('2023-02-15', 'YYYY-MM-DD'), 'C002', 150),
('O003', TO_DATE('2023-03-20', 'YYYY-MM-DD'), 'C003', 300);

-- Populate ORDER_ITEM table
INSERT INTO ORDER_ITEM (ORDERNO, ITEMNO, QTY) VALUES
('O001', 'T001', 2),
('O002', 'T002', 1),
('O003', 'T003', 3);

-- Populate SHIPMENT table
INSERT INTO SHIPMENT (ORDERNO, ITEMNO, SHIP_DATE) VALUES
('O001', 'T001', TO_DATE('2023-01-15', 'YYYY-MM-DD')),
('O002', 'T002', TO_DATE('2023-02-20', 'YYYY-MM-DD')),
('O003', 'T003', TO_DATE('2023-03-25', 'YYYY-MM-DD'));

-- Query C
SELECT C.CUSTOMERNO, C.CNAME, COUNT(O.ORDERNO) AS ORDER_COUNT
FROM CUSTOMER C
JOIN CUST_ORDER O ON C.CUSTOMERNO = O.CUSTOMERNO
GROUP BY C.CUSTOMERNO, C.CNAME
HAVING COUNT(O.ORDERNO) > 3;

-- Query D
SELECT * FROM ITEM WHERE UNIT_PRICE < (SELECT AVG(UNIT_PRICE) FROM ITEM);

-- Query E
UPDATE CUST_ORDER
SET ORD_AMT = 250
WHERE ORDERNO = 'O001';

-- Query F
CREATE VIEW DRIVER_TRIPS_VIEW AS
SELECT D.DCODE, D.DNAME, COUNT(DT.TRUCKCODE) AS TRIPS_TRAVELED
FROM DRIVER D
LEFT JOIN DRIVE_TRUCK DT ON D.DCODE = DT.DCODE
GROUP BY D.DCODE, D.DNAME;

-- Query G 
SET SERVEROUTPUT ON;

CREATE OR REPLACE PROCEDURE insert_drive_truck_record(
    p_truckcode IN DRIVE_TRUCK.TRUCKCODE%TYPE,
    p_dcode IN DRIVE_TRUCK.DCODE%TYPE,
    p_dot IN DRIVE_TRUCK.DOT%TYPE,
    p_ccode IN DRIVE_TRUCK.CCODE%TYPE
)
IS
    v_count NUMBER;
BEGIN
    -- Check if inserting the record exceeds the limit
    SELECT COUNT(*)
    INTO v_count
    FROM DRIVE_TRUCK
    WHERE CCODE = p_ccode AND DOT = p_dot;

    IF v_count >= 2 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Cannot insert more than two records for the same city on the same day');
    ELSE
        -- If the limit is not exceeded, proceed with the INSERT
        INSERT INTO DRIVE_TRUCK (TRUCKCODE, DCODE, DOT, CCODE)
        VALUES (p_truckcode, p_dcode, p_dot, p_ccode);
        COMMIT; -- Commit the transaction
    END IF;
END insert_drive_truck_record;
/

DECLARE
    v_truckcode DRIVE_TRUCK.TRUCKCODE%TYPE := 'T004';
    v_dcode DRIVE_TRUCK.DCODE%TYPE := 'D001';
    v_dot DRIVE_TRUCK.DOT%TYPE := TO_DATE('2023-01-01', 'YYYY-MM-DD');
    v_ccode DRIVE_TRUCK.CCODE%TYPE := 'CT001';
BEGIN
    insert_drive_truck_record(v_truckcode, v_dcode, v_dot, v_ccode);
END;
/


-- Query H 
CREATE OR REPLACE FUNCTION get_driver_trip_count(
      p_driver_code IN DRIVER.DCODE%TYPE
  )
  RETURN NUMBER
  IS
      v_trip_count NUMBER := 0;
  BEGIN
      -- Initialize the trip count to 0

      -- Check if the driver code exists
      SELECT COUNT(*)
      INTO v_trip_count
      FROM DRIVE_TRUCK
      WHERE DCODE = p_driver_code;

      RETURN v_trip_count;
  EXCEPTION
      WHEN NO_DATA_FOUND THEN
          RAISE_APPLICATION_ERROR(-20002, 'No such driver with code ' || p_driver_code);
  END get_driver_trip_count;
  /

 DECLARE
      v_trip_count NUMBER;
  BEGIN
      v_trip_count := get_driver_trip_count('D001');
      DBMS_OUTPUT.PUT_LINE('Total trips for driver D001: ' || v_trip_count);
  END;
  /

